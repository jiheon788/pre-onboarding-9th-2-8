#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

NORMAL='\033[0m'
BLUE='\033[0;34m'
IGREEN='\033[0;92m'
IRED='\033[0;91m'

trap "rm -f lintResult.txt totalExcludeList.txt changedList.txt tempError.txt tempResult.txt" EXIT # 스크립트로 생성되는 임시 파일 반드시 삭제

echo -e "\n${BLUE}husky pre-push를 실행합니다.${NORMAL}\n"

defaultExcludeList=$(cat .eslintignore) # 기본적인 eslint ignore 파일을 변수에 담고,
excludeList=$(git diff --name-only && git ls-files --others --exclude-standard) # untracked, unstaged 파일을 변수에 담고,
echo -e "$defaultExcludeList\n$excludeList" > totalExcludeList.txt # 위 둘을 합쳐서 종합적인 eslint ignore 파일을 만든다.

# 캐쉬로 걸러준 뒤 위에서 만든 종합적인 eslint ignore 파일로 무시할 것을 정한다. 린트 결과를 확인하고, 그 결과를 임시 파일을 생성해 담는다.
npx eslint --cache --ignore-path totalExcludeList.txt . --output-file lintResult.txt 2> tempError.txt | tee tempResult.txt

if [ -s lintResult.txt ]; then  # 린트 결과가 존재한다면,
  cat lintResult.txt  # 린트 결과가 담긴 파일을 출력해준다.
  echo ""
  isValidAnswer=false
  while [[ "$isValidAnswer" = false ]]; do
    read -p "$(echo -e ${IGREEN})수정 없이 그대로 진행 하시겠습니까? (Y/N) $(echo -e ${NORMAL})" answer < /dev/tty # 유저의 선택을 변수 answer에 담아서,
    if [[ "$answer" = "Y" || "$answer" = "N" ]]; then
      isValidAnswer=true
    else
      echo -e "${IRED}Y 또는 N 으로 선택 해 주세요.${NORMAL}"
    fi
  done

  if [ "$answer" = "N" ]; then
    echo -e "\n${BLUE}git push가 취소되었습니다.${NORMAL}\n"
    exit 1 # exit 0번이어야 스크립트 정상 종료 및 push가 이루어진다.
  fi
else
  echo -e "${IGREEN}모든 lint 룰이 지켜졌습니다.${NORMAL}"
fi

# orign/master ~ HEAD 브랜치까지 커밋 내역과 변경 된 파일을 화면에 출력한다.
echo -e "\n${IGREEN}변경 사항(origin/master...HEAD): ${NORMAL}\n"

if git rev-parse --verify origin/master > /dev/null 2>&1; then     # git rev-parse --verify {브랜치}는 해당 브랜치의 최근 커밋 id를 반환. 없다면 에러가 나는 것을 활용한 조건문
  # origin/master가 있는 경우
  git log --oneline origin/master...HEAD > changedList.txt
  echo "" >> changedList.txt
  git diff --name-only origin/master...HEAD >> changedList.txt
else
  # origin/master가 없는 경우, boiler-plate 파일 구성은 굳이 표시하지 않음.
  git log --oneline > changedList.txt
fi

cat changedList.txt
echo ""

# 출력한 변경 내역 리스트를 보고 push를 진행할지 마지막으로 묻는다.
isValidAnswer2=false
while [[ "$isValidAnswer2" = false ]]; do
  read -p "$(echo -e ${IGREEN})push 하시겠습니까? (Y/N) $(echo -e ${NORMAL})" answer < /dev/tty
  if [[ "$answer" = "Y" || "$answer" = "N" ]]; then
    isValidAnswer2=true
  else
    echo -e "${IRED}Y 또는 N 으로 선택 해 주세요.${NORMAL}"
  fi
done

if [ "$answer" = "N" ]; then
  echo -e "\n${BLUE}git push가 취소되었습니다.${NORMAL}\n"
  exit 1
fi

echo -e "\n협업 flow 도움말   -> https://www.notion.so/flow-64cc62ebebdf4800b95e26ffc084a390?pvs=4"
echo -e "\n${BLUE}husky pre-push를 종료합니다.${NORMAL}\n"
